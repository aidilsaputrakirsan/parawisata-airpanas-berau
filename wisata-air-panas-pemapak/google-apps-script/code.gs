// ID Google Sheet yang sudah dibuat di email innosys
const SPREADSHEET_ID = '1hC3fvFjzgN8sJqZXAX08olIdbNywP2hGrPiyr_brRRc';

// ID Google Drive folder untuk menyimpan file bukti pembayaran
const DRIVE_FOLDER_ID = '12BiwD5UKQv4BZyYe3iguxYEIdh9w-lSa';

/**
 * Handles GET requests to the web app
 */
function doGet(e) {
  // Create response object
  let responseData = {};
  
  try {
    // Process different actions
    if (e && e.parameter && e.parameter.action) {
      switch (e.parameter.action) {
        case 'getAvailability':
          responseData = getAvailabilityData();
          break;
        case 'getAllBookings':
          responseData = getAllBookings();
          break;
        case 'test':
          responseData = {
            status: 'success',
            message: 'API connection successful'
          };
          break;
        default:
          responseData = { 
            status: 'error', 
            message: 'Undefined action' 
          };
      }
    } else {
      responseData = { 
        status: 'error', 
        message: 'No action specified' 
      };
    }
  } catch (error) {
    responseData = {
      status: 'error',
      message: error.toString(),
      stack: error.stack
    };
    Logger.log('doGet error: ' + error.toString());
  }
  
  // Create a proper JSON response
  return ContentService.createTextOutput(JSON.stringify(responseData))
    .setMimeType(ContentService.MimeType.JSON);
}

/**
 * Handles POST requests (for receiving booking data)
 */
function doPost(e) {
  let responseData = {};
  
  try {
    // Parse data that was sent
    const data = JSON.parse(e.postData.contents);
    Logger.log("Data received: " + JSON.stringify(data));
    
    // Check for admin actions
    if (data.action === 'updateBookingStatus') {
      return updateBookingStatus(data.rowIndex, data.status);
    }
    
    // If not an admin action, process as a booking submission
    
    // Upload file to Google Drive
    const fileUrl = uploadFileToDrive(data.paymentProof);
    
    // Save data to Google Sheets
    const rowData = saveDataToSheet(data, fileUrl);
    
    // Send confirmation email (optional)
    try {
      sendConfirmationEmail(data, fileUrl);
    } catch (emailError) {
      Logger.log('Error sending email, but continuing: ' + emailError.toString());
    }
    
    // Return success response
    responseData = {
      status: 'success',
      message: 'Booking data saved successfully',
      data: rowData
    };
  } catch (error) {
    // Return error response with detailed info
    responseData = {
      status: 'error',
      message: error.toString(),
      stack: error.stack
    };
    Logger.log('doPost error: ' + error.toString());
  }
  
  // Create a proper JSON response
  return ContentService.createTextOutput(JSON.stringify(responseData))
    .setMimeType(ContentService.MimeType.JSON);
}

/**
 * Upload file bukti pembayaran ke Google Drive
 * 
 * @param {Object} fileData - Data file yang akan diupload
 * @returns {String} - URL file yang diupload
 */
function uploadFileToDrive(fileData) {
  try {
    // Decode base64 data
    const decoded = Utilities.base64Decode(fileData.base64Data);
    
    // Buat blob dari data tersebut
    const blob = Utilities.newBlob(decoded, fileData.type, fileData.name);
    
    // Dapatkan folder di Google Drive
    let folder;
    try {
      folder = DriveApp.getFolderById(DRIVE_FOLDER_ID);
    } catch (folderError) {
      Logger.log('Error accessing Drive folder: ' + folderError);
      // Fallback to root folder if specific folder not accessible
      folder = DriveApp.getRootFolder();
    }
    
    // Simpan file ke folder tersebut
    const file = folder.createFile(blob);
    
    // Buat nama file yang unik dengan timestamp
    const timestamp = new Date().toISOString().replace(/[^0-9]/g, '');
    const newFileName = `Payment_Proof_${timestamp}_${fileData.name}`;
    file.setName(newFileName);
    
    // Return URL file
    return file.getUrl();
  } catch (error) {
    Logger.log('Error saat upload file: ' + error.toString());
    throw new Error(`Error uploading file to Drive: ${error.toString()}`);
  }
}

/**
 * Simpan data booking ke Google Sheets
 * 
 * @param {Object} data - Data booking yang akan disimpan
 * @param {String} fileUrl - URL file bukti pembayaran
 * @returns {Array} - Data row yang disimpan ke Sheet
 */
function saveDataToSheet(data, fileUrl) {
  try {
    // Dapatkan spreadsheet dan sheet aktif
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    
    // Check if the spreadsheet exists
    if (!spreadsheet) {
      throw new Error('Spreadsheet not found with ID: ' + SPREADSHEET_ID);
    }
    
    // Get or create Bookings sheet
    let sheet = spreadsheet.getSheetByName('Bookings');
    if (!sheet) {
      // If Bookings sheet doesn't exist, create it or use the first sheet
      sheet = spreadsheet.getSheets()[0];
      
      // If we're using the first sheet, rename it to 'Bookings'
      if (sheet) {
        sheet.setName('Bookings');
        // Add headers if it's a new sheet
        sheet.appendRow([
          'Timestamp', 'Full Name', 'Email', 'Phone', 
          'Visit Date', 'Visit Time', 'Adults', 'Children', 
          'Total Amount', 'Notes', 'Payment Proof URL', 'Status'
        ]);
      } else {
        // No sheets in the spreadsheet, create a new one
        sheet = spreadsheet.insertSheet('Bookings');
        sheet.appendRow([
          'Timestamp', 'Full Name', 'Email', 'Phone', 
          'Visit Date', 'Visit Time', 'Adults', 'Children', 
          'Total Amount', 'Notes', 'Payment Proof URL', 'Status'
        ]);
      }
    }
    
    // Siapkan data row untuk disimpan ke sheet
    const rowData = [
      new Date(), // Timestamp
      data.fullName,
      data.email,
      data.phone,
      data.visitDate,
      data.visitTime,
      data.adults,
      data.children,
      calculateTotalAmount(data.adults, data.children), // Hitung total harga
      data.notes || '-',
      fileUrl,
      'Pending' // Status default
    ];
    
    // Tambahkan data ke sheet
    sheet.appendRow(rowData);
    
    return rowData;
  } catch (error) {
    Logger.log('Error saving data to sheet: ' + error.toString());
    throw new Error(`Error saving data to sheet: ${error.toString()}`);
  }
}

/**
 * Hitung total biaya berdasarkan jumlah pengunjung
 * 
 * @param {Number} adults - Jumlah pengunjung dewasa
 * @param {Number} children - Jumlah pengunjung anak-anak
 * @returns {Number} - Total biaya
 */
function calculateTotalAmount(adults, children) {
  const adultPrice = 25000; // Harga tiket dewasa
  const childPrice = 15000; // Harga tiket anak-anak
  
  return (adults * adultPrice) + (children * childPrice);
}

/**
 * Kirim email konfirmasi booking (opsional)
 * 
 * @param {Object} data - Data booking
 * @param {String} fileUrl - URL file bukti pembayaran
 */
function sendConfirmationEmail(data, fileUrl) {
  try {
    // Hanya lakukan jika email valid
    if (!data.email) return;
    
    // Format tanggal untuk email
    const formattedDate = new Date(data.visitDate).toLocaleDateString('id-ID', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
    // Total pembayaran
    const totalPayment = calculateTotalAmount(data.adults, data.children).toLocaleString('id-ID');
    
    // Template email
    const subject = 'Konfirmasi Pemesanan - Wisata Air Panas Pemapak';
    const htmlBody = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #0f8a9d;">Konfirmasi Pemesanan</h2>
        <p>Halo <strong>${data.fullName}</strong>,</p>
        <p>Terima kasih telah melakukan pemesanan di Wisata Air Panas Pemapak. Berikut adalah detail pemesanan Anda:</p>
        
        <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
          <p><strong>Tanggal Kunjungan:</strong> ${formattedDate}</p>
          <p><strong>Waktu Kunjungan:</strong> ${data.visitTime}</p>
          <p><strong>Jumlah Pengunjung:</strong> ${data.adults} Dewasa, ${data.children} Anak-anak</p>
          <p><strong>Total Pembayaran:</strong> Rp ${totalPayment}</p>
        </div>
        
        <p>Status pemesanan Anda saat ini adalah <strong>PENDING</strong>. Tim kami akan memverifikasi pembayaran Anda dan 
        akan mengubah status menjadi CONFIRMED dalam waktu 1x24 jam.</p>
        
        <p>Jika Anda memiliki pertanyaan, silakan hubungi kami di:</p>
        <p>WhatsApp: <a href="https://wa.me/6281234567890">+62 812-3456-7890</a><br>
        Email: <a href="mailto:info@wisataairpanaspemapak.com">info@wisataairpanaspemapak.com</a></p>
        
        <p>Terima kasih,<br>
        <strong>Tim Wisata Air Panas Pemapak</strong></p>
      </div>
    `;
    
    // Kirim email
    GmailApp.sendEmail(
      data.email,
      subject,
      "Silakan aktifkan tampilan HTML untuk melihat email ini.",
      { htmlBody: htmlBody }
    );
  } catch (error) {
    Logger.log('Error sending confirmation email: ' + error.toString());
    // Tidak throw error di sini agar tidak mengganggu proses utama
  }
}

/**
 * Mendapatkan data ketersediaan dari Google Sheets (untuk fitur calendaring)
 * 
 * @returns {Object} - Data ketersediaan
 */
function getAvailabilityData() {
  try {
    // Dapatkan spreadsheet dan sheet
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    let sheet = spreadsheet.getSheetByName('Availability');
    
    // If Availability sheet doesn't exist, try Bookings sheet
    if (!sheet) {
      sheet = spreadsheet.getSheetByName('Bookings');
      
      // If Bookings sheet doesn't exist either, create an Availability sheet
      if (!sheet) {
        sheet = spreadsheet.insertSheet('Availability');
        sheet.appendRow(['Date', 'Time', 'Available', 'Booked', 'Total']);
        
        // Add some dummy data
        const today = new Date();
        for (let i = 0; i < 30; i++) {
          const date = new Date(today);
          date.setDate(date.getDate() + i);
          
          const dateStr = Utilities.formatDate(date, 'GMT+8', 'yyyy-MM-dd');
          sheet.appendRow([dateStr, '08:00', 20, 0, 20]);
          sheet.appendRow([dateStr, '10:00', 20, 0, 20]);
          sheet.appendRow([dateStr, '13:00', 20, 0, 20]);
          sheet.appendRow([dateStr, '15:00', 20, 0, 20]);
        }
      }
    }
    
    // Dapatkan semua data
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Convert data ke array of objects
    const availabilityData = data.slice(1).map(row => {
      const obj = {};
      headers.forEach((header, index) => {
        obj[header] = row[index];
      });
      return obj;
    });
    
    return {
      status: 'success',
      data: availabilityData
    };
  } catch (error) {
    Logger.log('Error getting availability data: ' + error.toString());
    return {
      status: 'error',
      message: error.toString()
    };
  }
}

/**
 * Get all bookings data for admin dashboard
 * 
 * @returns {Object} - All booking data
 */
function getAllBookings() {
  try {
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = spreadsheet.getSheetByName('Bookings');
    
    if (!sheet) {
      return {
        status: 'error',
        message: 'Bookings sheet not found'
      };
    }
    
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    
    // Convert data to array of objects
    const bookings = data.slice(1).map((row, index) => {
      const booking = {};
      headers.forEach((header, i) => {
        booking[header] = row[i];
      });
      // Add row number for update operations
      booking.rowIndex = index + 2;
      return booking;
    });
    
    return {
      status: 'success',
      data: bookings
    };
  } catch (error) {
    Logger.log('Error getting bookings: ' + error.toString());
    return {
      status: 'error',
      message: error.toString()
    };
  }
}

/**
 * Update booking status in the spreadsheet
 * 
 * @param {Number} rowIndex - Row index in the spreadsheet (starting from 2)
 * @param {String} newStatus - New status value
 * @returns {Object} - Response status
 */
function updateBookingStatus(rowIndex, newStatus) {
  try {
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = spreadsheet.getSheetByName('Bookings');
    
    if (!sheet) {
      return {
        status: 'error',
        message: 'Bookings sheet not found'
      };
    }
    
    // Get the column index for Status (last column based on the image provided)
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const statusColIndex = headers.findIndex(header => header === 'Status') + 1;
    
    if (statusColIndex === 0) {
      return {
        status: 'error',
        message: 'Status column not found'
      };
    }
    
    // Update the status
    sheet.getRange(rowIndex, statusColIndex).setValue(newStatus);
    
    return {
      status: 'success',
      message: 'Booking status updated successfully'
    };
  } catch (error) {
    Logger.log('Error updating booking status: ' + error.toString());
    return {
      status: 'error',
      message: error.toString()
    };
  }
}

/**
 * Fungsi untuk pengujian akses ke spreadsheet
 * @param {Boolean} silent - If true, don't throw exceptions
 * @returns {Object} - Status test
 */
function testSpreadsheetAccess(silent) {
  try {
    Logger.log("Memulai test akses spreadsheet");
    
    // Coba akses spreadsheet
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    if (!spreadsheet) {
      throw new Error("Failed to open spreadsheet");
    }
    
    Logger.log("Berhasil membuka spreadsheet: " + spreadsheet.getName());
    
    // Coba akses sheet
    const sheets = spreadsheet.getSheets();
    if (!sheets || sheets.length === 0) {
      // No sheets, create one
      spreadsheet.insertSheet('Bookings');
      Logger.log("No sheets found, created a new 'Bookings' sheet");
    } else {
      Logger.log("Nama sheet pertama: " + sheets[0].getName());
    }
    
    if (silent) {
      return { status: 'success', message: "Spreadsheet access OK" };
    }
    
    return "Sukses: Akses spreadsheet OK";
  } catch (e) {
    Logger.log("ERROR pada pengujian akses spreadsheet: " + e.toString());
    
    if (silent) {
      return { 
        status: 'error', 
        message: "Error accessing spreadsheet: " + e.toString(),
        details: "Pastikan Anda telah memberi izin akses ke spreadsheet dan Google Drive dalam deployment Apps Script."
      };
    }
    
    throw new Error("Error accessing spreadsheet: " + e.toString());
  }
}